"""add component identification fields - local_part_id, barcode_id, manufacturer_part_number, provider_sku

Revision ID: e1925971c950
Revises: 7018a49dd597
Create Date: 2025-09-27 11:39:25.705808

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'e1925971c950'
down_revision: Union[str, None] = '7018a49dd597'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Get database connection
    connection = op.get_bind()

    # Check if columns already exist (for idempotency)
    inspector = sa.inspect(connection)
    try:
        existing_columns = [col['name'] for col in inspector.get_columns('components')]
    except Exception:
        # If table doesn't exist, let the operation proceed normally
        existing_columns = []

    # Add new component identification fields only if they don't exist
    if 'local_part_id' not in existing_columns:
        op.add_column('components', sa.Column('local_part_id', sa.String(50), nullable=True))
    if 'barcode_id' not in existing_columns:
        op.add_column('components', sa.Column('barcode_id', sa.String(50), nullable=True))
    if 'manufacturer_part_number' not in existing_columns:
        op.add_column('components', sa.Column('manufacturer_part_number', sa.String(100), nullable=True))
    if 'provider_sku' not in existing_columns:
        op.add_column('components', sa.Column('provider_sku', sa.String(100), nullable=True))

    # Create indexes for new fields (with conditional checks)
    try:
        op.create_index('ix_components_local_part_id', 'components', ['local_part_id'])
    except Exception:
        pass  # Index might already exist
    try:
        op.create_index('ix_components_barcode_id', 'components', ['barcode_id'])
    except Exception:
        pass
    try:
        op.create_index('ix_components_manufacturer_part_number', 'components', ['manufacturer_part_number'])
    except Exception:
        pass
    try:
        op.create_index('ix_components_provider_sku', 'components', ['provider_sku'])
    except Exception:
        pass

    # Create unique constraints for local_part_id and barcode_id
    try:
        op.create_unique_constraint('uq_components_local_part_id', 'components', ['local_part_id'])
    except Exception:
        pass  # Constraint might already exist
    try:
        op.create_unique_constraint('uq_components_barcode_id', 'components', ['barcode_id'])
    except Exception:
        pass

    # Data migration: Copy existing part_number to manufacturer_part_number
    try:
        connection.execute(sa.text("""
            UPDATE components
            SET manufacturer_part_number = part_number
            WHERE part_number IS NOT NULL AND manufacturer_part_number IS NULL
        """))

        # Generate auto IDs for existing components
        connection.execute(sa.text("""
            UPDATE components
            SET
                local_part_id = CASE
                    WHEN component_type = 'resistor' THEN 'RES-' || substr(id, 1, 8)
                    WHEN component_type = 'capacitor' THEN 'CAP-' || substr(id, 1, 8)
                    WHEN component_type = 'inductor' THEN 'IND-' || substr(id, 1, 8)
                    WHEN component_type = 'ic' THEN 'IC-' || substr(id, 1, 8)
                    WHEN component_type = 'microcontroller' THEN 'MCU-' || substr(id, 1, 8)
                    WHEN component_type = 'diode' THEN 'D-' || substr(id, 1, 8)
                    WHEN component_type = 'transistor' THEN 'Q-' || substr(id, 1, 8)
                    WHEN component_type = 'connector' THEN 'CONN-' || substr(id, 1, 8)
                    WHEN component_type = 'crystal' THEN 'XTAL-' || substr(id, 1, 8)
                    ELSE 'PART-' || substr(id, 1, 8)
                END,
                barcode_id = lower(hex(randomblob(13)))
            WHERE local_part_id IS NULL OR barcode_id IS NULL
        """))
    except Exception as e:
        print(f"Data migration warning: {e}")

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Remove unique constraints
    op.drop_constraint('uq_components_barcode_id', 'components', type_='unique')
    op.drop_constraint('uq_components_local_part_id', 'components', type_='unique')

    # Remove indexes
    op.drop_index('ix_components_provider_sku', 'components')
    op.drop_index('ix_components_manufacturer_part_number', 'components')
    op.drop_index('ix_components_barcode_id', 'components')
    op.drop_index('ix_components_local_part_id', 'components')

    # Remove columns
    op.drop_column('components', 'provider_sku')
    op.drop_column('components', 'manufacturer_part_number')
    op.drop_column('components', 'barcode_id')
    op.drop_column('components', 'local_part_id')
    # ### end Alembic commands ###