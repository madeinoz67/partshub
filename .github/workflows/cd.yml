name: "Continuous Deployment"

"on":
  push:
    branches: ["main"]
  workflow_dispatch:

env:
  DOCKER_REGISTRY: ghcr.io
  DOCKER_REPOSITORY: partshub

permissions:
  contents: write      # For GitHub Pages deployment and repo checkout
  packages: write      # For pushing Docker images to GHCR
  checks: read         # For checking CI workflow status
  actions: write       # For GitHub Actions cache (Docker layer caching)
  statuses: read       # For workflow status checks

jobs:
  check_ci_status:
    name: "Check CI Status"
    runs-on: ubuntu-latest
    outputs:
      ci_passed: ${{ steps.check.outputs.ci_passed }}

    steps:
      - name: Wait for backend tests
        uses: lewagon/wait-on-check-action@v1.3.1
        with:
          ref: ${{ github.ref }}
          check-name: 'Backend Tests (Full)'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 10

      - name: Wait for frontend tests
        uses: lewagon/wait-on-check-action@v1.3.1
        with:
          ref: ${{ github.ref }}
          check-name: 'Frontend Tests (Full)'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 10

      - name: Wait for security scan
        uses: lewagon/wait-on-check-action@v1.3.1
        with:
          ref: ${{ github.ref }}
          check-name: 'Security Scan'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 10

      - name: Wait for Docker build
        uses: lewagon/wait-on-check-action@v1.3.1
        with:
          ref: ${{ github.ref }}
          check-name: 'Docker Build'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 10

      - name: Check CI status
        id: check
        run: echo "ci_passed=true" >> $GITHUB_OUTPUT

  publish_docker_image:
    name: "Publish Docker Image"
    runs-on: ubuntu-latest
    needs: [check_ci_status]
    if: ${{ always() && needs.check_ci_status.outputs.ci_passed == 'true' }}
    outputs:
      publish_status: ${{ steps.publish.outputs.status }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version from pyproject.toml
        id: version
        run: |
          VERSION=$(grep '^version =' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=${{ env.DOCKER_REGISTRY }}/${{ github.repository }}:$VERSION" >> $GITHUB_OUTPUT

          # Extract short SHA for dev tagging
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          echo "short_sha=$SHORT_SHA" >> $GITHUB_OUTPUT

      - name: Build and push all-in-one image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          target: development
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}:dev
            ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}:dev-${{ steps.version.outputs.version }}
            ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}:dev-${{ steps.version.outputs.short_sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Mark publish as successful
        id: publish
        run: echo "status=success" >> $GITHUB_OUTPUT

  build_and_deploy_docs:
    name: "Build and Deploy Documentation"
    runs-on: ubuntu-latest
    needs: [check_ci_status]
    if: ${{ always() && needs.check_ci_status.outputs.ci_passed == 'true' }}
    outputs:
      docs_url: ${{ steps.deploy.outputs.docs_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for mike

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Install dependencies
        run: uv sync --all-extras --dev

      - name: Configure git for mike
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Fetch gh-pages branch
        run: |
          # Fetch the gh-pages branch to ensure we have the latest remote changes
          # This prevents push conflicts when multiple deployments occur
          git fetch origin gh-pages:gh-pages || echo "gh-pages branch does not exist yet"

      - name: Deploy development docs with Mike
        run: |
          # Deploy development docs as 'dev' version without setting as default
          # This preserves the versioned documentation structure created by releases
          uv run mike deploy --push dev

      - name: Set docs URL
        id: deploy
        run: |
          echo "docs_url=https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}" >> $GITHUB_OUTPUT

  notify_publish:
    name: "Publish Summary"
    runs-on: ubuntu-latest
    needs: [publish_docker_image, build_and_deploy_docs]
    if: always()

    steps:
      - name: Output publish summary
        run: |
          echo "# ðŸš€ Publish Summary"
          echo ""
          echo "**Docker Image**: ${{ needs.publish_docker_image.outputs.publish_status || 'skipped' }}"
          echo "**Documentation**: ${{ needs.build_and_deploy_docs.outputs.docs_url || 'N/A' }}"
          echo ""
          echo "**Commit**: ${{ github.sha }}"
          echo "**Branch**: ${{ github.ref_name }}"
          echo "**Triggered by**: ${{ github.actor }}"