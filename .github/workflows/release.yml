name: "Release Automation"

# This workflow is triggered by Release Please after a release PR is merged.
# Release Please handles:
#   - Version bumping in pyproject.toml
#   - CHANGELOG.md generation
#   - Creating git tags
#   - Creating GitHub releases with release notes
#
# This workflow handles:
#   - Building and publishing Docker images
#   - Deploying versioned documentation

"on":
  push:
    tags:
      - 'v*.*.*'  # Triggered when Release Please creates a tag

env:
  DOCKER_REGISTRY: ghcr.io
  DOCKER_REPOSITORY: partshub

permissions:
  contents: write      # For GitHub Pages deployment
  packages: write      # For pushing Docker images to GHCR
  actions: write       # For GitHub Actions cache

jobs:
  build_docker_image:
    name: "Build and Push Docker Image"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.DOCKER_REPOSITORY }}:${{ steps.version.outputs.version }}
            ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.DOCKER_REPOSITORY }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ steps.version.outputs.version }}

  deploy_documentation:
    name: "Deploy Versioned Documentation"
    runs-on: ubuntu-latest
    needs: [build_docker_image]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for mike to work with git history

      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Install documentation dependencies
        run: uv sync --extra docs

      - name: Configure git for mike
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Fetch gh-pages branch
        run: |
          git fetch origin gh-pages:gh-pages || echo "gh-pages branch does not exist yet"

      - name: Deploy documentation with mike
        run: |
          uv run mike deploy --push --update-aliases ${{ steps.version.outputs.version }} latest
          uv run mike set-default --push latest

      - name: Generate documentation index
        run: |
          uv run mike list

  notify_success:
    name: "Notify Release Success"
    runs-on: ubuntu-latest
    needs: [build_docker_image, deploy_documentation]
    if: success()

    steps:
      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create success summary
        run: |
          cat >> $GITHUB_STEP_SUMMARY << EOF
          # ✅ Release v${{ steps.version.outputs.version }} Published Successfully

          ## Release Artifacts
          - 🐳 **Docker Image**: \`${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.DOCKER_REPOSITORY }}:${{ steps.version.outputs.version }}\`
          - 📚 **Documentation**: https://${{ github.repository_owner }}.github.io/${{ env.DOCKER_REPOSITORY }}
          - 📦 **GitHub Release**: https://github.com/${{ github.repository }}/releases/tag/v${{ steps.version.outputs.version }}

          ## What was deployed
          - Docker image tagged with \`${{ steps.version.outputs.version }}\` and \`latest\`
          - Versioned documentation deployed with mike
          - Release notes and changelog updated by Release Please

          ## Next Steps
          - Pull the new Docker image: \`docker pull ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.DOCKER_REPOSITORY }}:latest\`
          - View the documentation: https://${{ github.repository_owner }}.github.io/${{ env.DOCKER_REPOSITORY }}
          - Check the release notes: https://github.com/${{ github.repository }}/releases/tag/v${{ steps.version.outputs.version }}
          EOF

  notify_failure:
    name: "Notify Release Failure"
    runs-on: ubuntu-latest
    needs: [build_docker_image, deploy_documentation]
    if: failure()

    steps:
      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create failure summary
        run: |
          cat >> $GITHUB_STEP_SUMMARY << EOF
          # ❌ Release v${{ steps.version.outputs.version }} Failed

          The release workflow encountered an error. Please check the logs above for details.

          ## Troubleshooting
          1. Check the Docker build logs
          2. Verify documentation builds locally: \`uv run mkdocs build --strict\`
          3. Ensure all CI checks passed before the release
          4. Check GitHub Actions permissions

          ## Manual Recovery
          If needed, you can manually deploy:
          - Docker: \`docker build -t ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.DOCKER_REPOSITORY }}:${{ steps.version.outputs.version }} .\`
          - Docs: \`uv run mike deploy ${{ steps.version.outputs.version }} latest\`
          EOF
